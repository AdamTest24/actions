name: 'setup-lesson-deps'
description: 'Action to set up package dependencies for Carpentries Lessons'
author: 'Zhian N. Kamvar'
inputs:
  cache-version:
    description: 'The version of the cache, change this from the default (1) to start over with a fresh cache'
    required: true
    default: 1
runs:
  using: "composite"
  steps:
      - name: "Restore {renv} Cache"
        uses: actions/cache@v3.0.11
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-${{ inputs.cache-version }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys:
            ${{ runner.os }}-${{ inputs.cache-version }}-renv-

      - name: "Setup System Dependencies"
        shell: Rscript {0}
        run: |
          cat("::group::Register Repositories\n")
          on_linux <- Sys.info()[["sysname"]] == "Linux"
          if (on_linux) {
            if (Sys.getenv("RSPM") == "") {
              release <- system("lsb_release -c | awk '{print $2}'", intern = TRUE)
              Sys.setenv("RSPM" = 
                paste0("https://packagemanager.rstudio.com/all/__linux__/", release, "/latest"))
            }
          }
          repos <- list(
            RSPM        = Sys.getenv("RSPM"),
            carpentries = "https://carpentries.r-universe.dev/",
            archive     = "https://carpentries.github.io/drat/",
            CRAN        = "https://cran.rstudio.com"
          )
          options(pak.no_extra_messages = TRUE, repos = repos)
          cat("Repositories Used")
          print(getOption("repos"))
          cat("::endgroup::\n")
          # Set up system dependencies
          req <- function(pkg) {
            if (!requireNamespace(pkg, quietly = TRUE)) 
              install.packages(pkg)
          }
          wd <- '${{ github.workspace }}'
          has_lock <- file.exists(file.path(wd, 'renv'))
          if (Sys.info()[["sysname"]] == "Linux" && has_lock) {
            req("renv")
            req("remotes")
            req("desc")
            remotes::install_github("zkamvar/vise")
            if (file.exists("DESCRIPTION")) {
              file.rename("DESCRIPTION", "DESCRIPTION.bak")
            }
            Sys.setenv("RENV_PROFILE" = "lesson-requirements")
            vise::lock2desc(renv::paths$lockfile(), desc = "${{ github.workspace }}/DESCRIPTION")
            writeLines(readLines("${{ github.workspace }}/DESCRIPTION"))
            vise::ci_sysreqs(renv::paths$lockfile(), execute = TRUE)
          }

      - name: "Fortify Local {renv} Packages"
        shell: Rscript {0}
        run: |
          cat("::group::Register Repositories\n")
          on_linux <- Sys.info()[["sysname"]] == "Linux"
          if (on_linux) {
            if (Sys.getenv("RSPM") == "") {
              release <- system("lsb_release -c | awk '{print $2}'", intern = TRUE)
              Sys.setenv("RSPM" = 
                paste0("https://packagemanager.rstudio.com/all/__linux__/", release, "/latest"))
            }
          }
          repos <- list(
            RSPM        = Sys.getenv("RSPM"),
            carpentries = "https://carpentries.r-universe.dev/",
            archive     = "https://carpentries.github.io/drat/",
            CRAN        = "https://cran.rstudio.com"
          )
          options(pak.no_extra_messages = TRUE, repos = repos)
          cat("Repositories Used")
          print(getOption("repos"))
          cat("::endgroup::\n")

          # Fortify local {renv} packages
          cat("::group::Fortify local {renv} packages\n")
          wd <- '${{ github.workspace }}'
          req <- function(pkg) {
            if (!requireNamespace(pkg, quietly = TRUE)) 
              install.packages(pkg)
          }
          if (file.exists("DESCRIPTION")) {
            req("remotes")
            remotes::install_deps()
          }
          cat("::endgroup::\n")
          if (file.exists(file.path(wd, 'renv'))) {
            cat("::group::Fortify local {renv} packages\n")
            if (file.exists("DESCRIPTION.bak")) {
              file.rename("DESCRIPTION.bak", "DESCRIPTION")
            } else {
              try(file.remove("DESCRIPTION"), silent = TRUE)
            }
            req("renv")
            Sys.setenv("RENV_PROFILE" = "lesson-requirements")
            sandpaper::manage_deps(path = wd, quiet = FALSE)
            cat("::endgroup::\n")
          } else {
            writeLines("Package cache not used")
          }

      - name: Don't use tar 1.30 from Rtools35 to store the cache
        shell: bash
        run: |
          if command -v /c/Rtools/bin/tar && /c/Rtools/bin/tar --version | grep -q 'tar (GNU tar) 1.30'
            then echo 'C:/Program Files/Git/usr/bin' >> $GITHUB_PATH
          fi
