name: 'update-lockfile'
description: 'Action to update package dependencies for Carpentries Lessons'
author: 'Zhian N. Kamvar'
inputs:
  cache-version:
    description: 'The version of the cache, change this from the default (1) to start over with a fresh cache'
    required: true
    default: 1
  update:
    description: 'flag to update already installed packages'
    default: true
  repos:
    description: 'default repositories to set as an R expression (defaults to Carpentries repositories)'
    default: |
      c(
        carpentries = 'https://carpentries.r-universe.dev/',
        carpentries_archive = 'https://carpentries.github.io/drat/',
        CRAN = 'https://cran.rstudio.com'
      )
  profile:
    description: 'the {renv} profile to update (defaults to lesson-requirements)'
    default: 'lesson-requirements'
outputs:
  n:
    description: the number of packages to be updated
    value: ${{ steps.update.outputs.n }}
  date:
    description: the date (used for branch name)
    value: ${{ steps.update.outputs.date }}
  report:
    description: the report of packages to be updated in the lesson
    value: ${{ steps.update.outputs.report }}
runs:
  using: "composite"
  steps:
      - name: "Restore {renv} Cache"
        uses: actions/cache@v2
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-${{ inputs.cache-version }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys:
            ${{ runner.os }}-${{ inputs.cache-version }}-renv-

      - name: "Setup System Dependencies"
        shell: Rscript {0}
        run: |
          wd <- '${{ github.workspace }}'
          has_lock <- file.exists(file.path(wd, 'renv'))
          if (Sys.info()[["sysname"]] == "Linux" && has_lock) {
            if (!requireNamespace("renv")) {
              install.packages("renv", repos = "https://cran.rstudio.com")
            }
            if (!requireNamespace("pak")) {
              install.packages("pak", repos = "https://r-lib.github.io/p/pak/stable/")
            }
            if (!requireNamespace("processx")) {
              install.packages("processx")
            }
            Sys.setenv("RENV_PROFILE" = "lesson-requirements")
            lock <- renv:::lockfile(renv::paths$lockfile())$data()
            pkgs <- names(lock$Packages)
            db <- available.packages()
            compiled <- db[, "Package"] %in% pkgs & db[, "NeedsCompilation"] == "yes"
            pkgs <- db[compiled, "Package", drop = TRUE]
            ver <- tolower(system("lsb_release -irs", intern = TRUE))
            seen <- character(0)
            for (dep in pkgs) {
              if (dep == "stringi") { # We have this one taken care of
                next
              }
              these <- pak::pkg_system_requirements(
                os = ver[1], os_release = ver[2], package = dep, execute = FALSE
              )
              these <- sub('apt-get install -y ', '', these)
              new <- setdiff(these, seen)
              if (length(new)) {
                seen <- c(seen, new)
                cmd <- paste(new, collapse = " ")
                cmd <- paste("sudo apt-get install -y", cmd)
                cat("Executing", cmd, "\n")
                processx::run("sh", c("-c", cmd), stdout_callback = NULL,
                  stderr_to_stdout = TRUE)
              }
            }
          }

      - name: "Update {renv} deps and determine if a PR is needed"
        id: update
        shell: Rscript {0}
        run: |
          # Verify inputs ------------------------------------------------------
          cat("::group::Verifying inputs\n")
          in_repos <- expression(${{ inputs.repos }})
          pd <- getParseData(parse(text = as.character(in_repos)))
          funs <- pd$token == "SYMBOL_FUNCTION_CALL"
          if (any(funs) && any(pd$text[funs] != "c")) {
            stop("::error::repository settings should be an R vector. No functions other than `c()` are allowed")
          }
          cat("::endgroup::\n")
          # Setup --------------------------------------------------------------
          cat("::group::Preparing {renv}\n")
          on_linux <- Sys.info()[["sysname"]] == "Linux"
          if (on_linux)
            options(repos = c(RSPM = Sys.getenv("RSPM"), getOption("repos")))
          options(repos = ${{ inputs.repos }})
          if (!requireNamespace("renv", quietly = TRUE))
            install.packages("renv")
          if (!requireNamespace("jsonlite", quietly = TRUE))
            install.packages("jsonlite")
          n <- 0
          the_report <- character(0)
          cat("::endgroup::\n")

          # Load {renv}, read lockfile, restore, hydrate, and snapshot ---------
          cat("::group::Restoring package library\n")
          Sys.setenv("RENV_PROFILE" = "${{ inputs.profile }}")
          lib  <- renv::paths$library()
          lock <- renv::paths$lockfile()
          current_lock <- jsonlite::read_json(lock)
          renv::load()
          shh <- capture.output(renv::restore(library = lib, lockfile = lock))
          cat("::endgroup::\n")

          # Detect any new packages that entered the lesson --------------------
          cat("::group::Discovering new packages\n")
          hydra       <- renv::hydrate(library = lib, update = FALSE)
          new_lock    <- renv::snapshot(library = lib, lockfile = lock)
          sneaky_pkgs <- setdiff(names(new_lock$Packages), names(current_lock$Packages))
          if (length(sneaky_pkgs)) {
            these <- new_lock$Packages[sneaky_pkgs]
            pkg_info <- function(i) {
              lead <- "- "
              paste0(lead, i$Package, '\t[* -> ', i$Version, ']')
            }
            pkgs <- vapply(these, FUN = pkg_info, FUN.VALUE = character(1))
            if (on_linux) {
              # We need to make sure that we have the resources for the packages
              # we are bringing in. This _could_ be optimized, but considering
              # this is an update step and not a production step, it can take
              # its sweet time. 
              if (!requireNamespace("pak", quietly = TRUE))
                install.packages("pak")
              ver <- tolower(system("lsb_release -irs", intern = TRUE))
              for (pkg in these) {
                pak::pkg_system_requirements(
                  os = ver[1], os_release = ver[2], package = dep, execute = TRUE
                )
              }
            }
            n <- n + length(sneaky_pkgs)
            the_report <- c(the_report, 
              "# NEW ================================",
              pkgs,
              ""
            )
            cat(n, "packages found", paste(sneaky_pkgs, collapse = ", "), "\n")
          }
          cat("::endgroup::\n")
          # Check for updates to packages --------------------------------------
          should_update <- '${{ inputs.update }}' == 'true'
          if (should_update) {
            cat("::group::Applying Updates\n")
            updates <- renv::update(library = lib, check = TRUE)
            updates_needed <- !identical(updates, TRUE)
          } else {
            updates_needed <- FALSE
          }
          if (updates_needed) {
            # apply the updates and run a snapshot if the dry run found updates
            renv::update(library = lib)
            renv::snapshot(lockfile = lock)
            n <- n + length(updates$diff)
            the_report <- c(the_report, 
              utils::capture.output(print(updates), type = "message"))
            cat("Updating", length(updates$diff), "packages", "\n")
            cat("::endgroup::\n")
          }
          cat("::group::Cleaning the cache\n")
          renv::clean(actions = c('package.locks', 'library.tempdirs', 'unused.packages'))
          cat("::endgroup::\n")
          # Construct the output -----------------------------------------------
          # https://github.community/t/set-output-truncates-multiline-strings/16852/3?u=zkamvar
          cat("::group::Creating the output\n")
          the_report <- paste0(the_report, collapse = "%0A")
          meow  <- function(...) cat(..., "\n", sep = "")
          meow(the_report)
          meow("::set-output name=report::", the_report)
          meow("::set-output name=n::", n)
          meow("::set-output name=date::", as.character(Sys.Date()))
          cat("::endgroup::\n")

      - name: Don't use tar 1.30 from Rtools35 to store the cache
        shell: bash
        run: |
          if command -v /c/Rtools/bin/tar && /c/Rtools/bin/tar --version | grep -q 'tar (GNU tar) 1.30'
            then echo 'C:/Program Files/Git/usr/bin' >> $GITHUB_PATH
          fi
